* Git Grimoire
** Install

*** recipe: 1468151265, install with stow (source)
*** recipe: 1471191405, install with guix

$ guix pull
$ guix package -i git git-manpages

CentOS
$ sudo yum install -y curl-devel expat-devel gettext-devel \
openssl-devel perl-devel zlib-devel
$ sudo yum install -y asciidoc xmlto docbook2X

Debian
$ sudo apt-get install -y libcurl4-gnutls-dev libexpat1-dev gettext \
libz-dev libssl-dev
$ sudo apt-get install -y asciidoc xmlto docbook2x

$ wget 'https://www.kernel.org/pub/software/scm/git/git-2.9.0.tar'{.sign,.xz}
$ tar -xf git-2.9.0.tar.xz

$ cd git-2.9.0

$ make configure
$ ./configure --prefix=${HOME}/tools
$ make
$ make man info

$ make install prefix=${HOME}/tools/stow/git-2.9.0
$ make install-man install-info prefix=${HOME}/tools/stow/git-2.9.0

$ cd ~/tools/stow
$ stow -S git-2.9.0

$ cd ~/

Zsh
$ rehash

$ which git
$ git version

Git - Installing Git
https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

How To Install Git on CentOS 7 | DigitalOcean
https://www.digitalocean.com/community/tutorials/how-to-install-git-on-centos-7

*** recipe: 1468151252, install with APT
$ apt-get install git git-doc

Optional
$ apt-get install git-annex
** Lists
*** Free git repos

Bitbucket â€” The Git solution for professional teams
https://bitbucket.org/

GitLab.com | GitLab
https://about.gitlab.com/gitlab-com/

Free Git Hosting | Unlimited Repos and Users | Assembla
https://www.assembla.com/git/

GitHub - Pricing
https://github.com/pricing
** Config variables
*** Show global config

$ env --unset=GIT_CONFIG git config --list
*** Show config

$ git config --list
*** Unset variable

$ git config --unset branch.<branch>.merge
** SSH config

#+BEGIN_EXAMPLE
	Host github.com
			 PreferredAuthentications publickey
			 User git
			 HostName github.com
			 IdentityFile ~/.ssh/repo/%h_dev_ed25519
			 IdentityFile ~/.ssh/repo/%h_dev_rsa
			 IdentityFile ~/.ssh/repo/%h_dev_ecdsa
			 IdentityFile ~/.ssh/repo/%h_dev_ed25519_old
			 IdentityFile ~/.ssh/repo/%h_dev_rsa_old
			 IdentityFile ~/.ssh/repo/%h_dev_ecdsa_old
			 IdentitiesOnly yes
#+END_EXAMPLE

#+BEGIN_EXAMPLE
	Host github.<id>
			 PreferredAuthentications publickey
			 User git
			 HostName github.com
			 IdentityFile ~/.ssh/repo/%h_<id>_ed25519
			 IdentityFile ~/.ssh/repo/%h_<id>_rsa
			 IdentityFile ~/.ssh/repo/%h_<id>_ecdsa
			 IdentityFile ~/.ssh/repo/%h_<id>_ed25519_old
			 IdentityFile ~/.ssh/repo/%h_<id>_rsa_old
			 IdentityFile ~/.ssh/repo/%h_<id>_ecdsa_old
			 IdentitiesOnly yes
#+END_EXAMPLE

** Setup/Configure git
man 1 git-config
GIT_CONFIG
Take the configuration from the given file instead of
.git/config. Using the "--global" option forces this to
~/.gitconfig. Using the "--system" option forces this to
$(prefix)/etc/gitconfig.

*** Set Global config options

$ echo "git config --global user.email '<email>' ;\
git config --global user.name \"<name>\" ;\
git config --global core.editor 'emacsclient -s projects -c' ;\
git config --global merge.conflictstyle diff3 ;\
git config --global color.ui true" | env --unset=GIT_CONFIG bash -s

$ env --unset=GIT_CONFIG bash -c "
git config --global user.email '<email>' ;\
git config --global user.name \"<name>\" ;\
git config --global core.editor 'emacsclient -s projects -c' ;\
git config --global merge.conflictstyle diff3 ;\
git config --global color.ui true"

*** Set config options, recipe: 1458256211

$ git config user.email "<email>" ; \
git config user.name "<name>" ; \
git config core.editor "emacsclient -s projects -c" ; \
git config merge.conflictstyle diff3 ; \
git config color.ui true
*** Inside docker container, recipe: 1458256222

git config --global user.email "<email>" ; \
git config --global user.name "<name>" ; \
git config --global merge.conflictstyle diff3 ; \
git config --global color.ui true

** Initialize a new git repo

Create a new directory and initialize it.
git init <project-name>

Initialize the current directory as a git repository.
git init

Using Emacs Dired and Magit
S-+ <project-name>
M-x magit-init <project-name>
** Remote repos
*** SSH Agent

#+BEGIN_EXAMPLE
	$ eval "$(ssh-agent -s)"

	$ ssh-add -L
	$ ssh-add <key-path>/<private-key> # add key if not in the agent
	$ ssh-add -L
#+END_EXAMPLE

*** Test github ssh connection

$ ssh -T git@github.com

Testing your SSH connection - User Documentation
https://help.github.com/articles/testing-your-ssh-connection/
