* Guix & GuixSD
** Installation

*** GuixSD: Installation of Guix distro

**** Install using the usb image, recipe: 1461320171
***** Download & extract USB Image

$ zsh -li
$ export GUIX_ARCHITECHTURE=x86_64
$ export GUIX_VERSION=0.10.0
$ export USB_IMAGE=guixsd-usb-install-${GUIX_VERSION}.${GUIX_ARCHITECHTURE}-linux
$ wget ftp://alpha.gnu.org/gnu/guix/${USB_IMAGE}.xz{.sig,}

$ gpg2 --keyserver keys.gnupg.net --recv-keys 3D9AEBB5
$ gpg2 --verify ${USB_IMAGE}.xz{.sig,}

$ xz --decompress --keep --verbose ${USB_IMAGE}.xz

***** Libvirt setup, Execute on Host

Before install
$ export DISPLAY=:100
$ export LIBVIRT_DEFAULT_URI=qemu:///system
$ ./build.zsh

After install
$ virsh domblklist guixsd-0.10.0
$ virsh detach-disk guixsd-0.10.0 sda --config
$ virsh domblklist guixsd-0.10.0
$ virsh start guixsd-0.10.0 && virt-viewer guixsd-0.10.0 &

***** Execute on Guest
$ ip link show
$ ip link set ens3 up
$ dhclient -v ens3
$ ping -c 4 gnu.org

Paritioning plan
Assumming disk is 20GiB
Bootloader 2MiB
/boot 300MiB ext2/4
Swap 1GiB
/ (rest of disk space) ext4

$ lsblk
Start parted shell
$ parted -a optimal /dev/sda
(parted) unit MiB
(parted) mklabel gpt
(parted) mkpart primary 1MiB 3MiB
(parted) name 1 grub
(parted) set 1 bios_grub on
(parted) print
(parted) mkpart primary 3MiB 303MiB
(parted) name 2 boot
(parted) print

Calculation on host with zsh shell
$ ((mib = 1 * (1024 ** 1)))
$ print ${mib}
1024
$ print $((mib + 303))
1327

(parted) mkpart primary 303MiB 1327MiB
(parted) name 3 swap
(parted) print
(parted) mkpart primary 1327MiB -1
(parted) name 4 root
(parted) set 2 boot on
(parted) print
(parted) quit

$ lsblk
$ mkfs.ext4 /dev/sda2
$ mkswap /dev/sda3
$ mkfs.ext4 /dev/sda4
$ lsblk -f

$ lsblk
$ mount /dev/sda4 /mnt
$ mkdir /mnt/boot
$ mount /dev/sda2 /mnt/boot
$ df -hT

$ herd start cow-store /mnt
$ mkdir /mnt/etc
$ ls /etc/configuration # optional
$ cp /etc/configuration/bare-bones.scm /mnt/etc/config.scm
$ zile /mnt/etc/config.scm

$ mount --bind /mnt/tmp /tmp
$ swapon /dev/sda3
$ guix system init /mnt/etc/config.scm /mnt
$ umount /tmp
$ swapoff /dev/sd3
$ shutdown
*** Guix: Installation on foreign OS
**** Install guix as root, recipe: 1460090703

wget ftp://alpha.gnu.org/gnu/guix/guix-binary-0.10.0.x86_64-linux.tar.xz{,.sig}
gpg --keyserver keys.gnupg.net --recv-keys 3D9AEBB5
gpg --verify guix-binary-0.10.0.x86_64-linux.tar.xz.sig

mv guix-binary-0.10.0.x86_64-linux.tar.xz* /tmp
cd /tmp

sudo tar --warning=no-timestamp -xf guix-binary-0.10.0.x86_64-linux.tar.xz
sudo bash -c 'mv var/guix /var/ && mv gnu /'

sudo ln -sf /var/guix/profiles/per-user/root/guix-profile ~root/.guix-profile
groupadd --system guixbuild
sudo bash -c '
> for i in `seq -w 1 10`;
>   do
>     useradd -g guixbuild -G guixbuild           \
>             -d /var/empty -s `which nologin`    \
>             -c "Guix build user $i" --system    \
>             guixbuilder$i;
>   done'

sudo cp ~root/.guix-profile/lib/systemd/system/guix-daemon.service /etc/systemd/system/
sudo systemctl daemon-reload
sudo bash -c 'systemctl start guix-daemon && systemctl enable guix-daemon'
systemctl status guix-daemon

sudo mkdir -p /usr/local/bin
cd /usr/local/bin
sudo ln -s /var/guix/profiles/per-user/root/guix-profile/bin/guix

sudo mkdir -p /usr/local/share/info
cd /usr/local/share/info
sudo bash -c '
> for i in /var/guix/profiles/per-user/root/guix-profile/share/info/* ;
>   do ln -s $i ; done'
info guix

sudo -iu root
echo 'export PATH="$HOME/.guix-profile/bin:$HOME/.guix-profile/sbin:${PATH}"' >> $HOME/.bashrc
echo 'export GUIX_LOCPATH=$HOME/.guix-profile/lib/locale' >> $HOME/.bashrc
source $HOME/.bashrc
exit

sudo bash -c 'guix archive --authorize < ~root/.guix-profile/share/guix/hydra.gnu.org.pub'
** Package development

*** Imports

$ guix import elpa --archive=melpa-stable helm-ag
*** Commit message example

#+BEGIN_EXAMPLE
gnu: Add emacs-helm.

 * gnu/packages/emacs.scm (emacs-helm): New variable.
#+END_EXAMPLE
*** Development environment

$ guix environment guix --ad-hoc help2man git strace
$ eval `guix environment guix --ad-hoc --search-paths help2man git strace`

$ unset GUIX_PACKAGE_PATH
$ export GUIX_BUILD_OPTIONS="--keep-failed --verbosity=3"
$ export BUILD_LOG=${HOME}/tmp/logs/pre-guix-build.log

Inital setup
$ mkdir -p $(dirname ${BUILD_LOG})
$ git clone --recurse git://git.savannah.gnu.org/guix.git

Update
$ git pull --recurse-submodules

Git config
$ git config user.email "<email>"; \
git config user.name "<name>"; \
git config core.editor "emacsclient -s projects -c"; \
git config merge.conflictstyle diff3; \
git config color.ui true

Build
$ make clean
$ ./bootstrap
$ ./configure --localstatedir=/var
$ make
$ make check

Runs in the foreground
#optional unless editing daemon code
$ sudo ./pre-inst-env guix-daemon --build-users-group=guixbuild

$ ./pre-inst-env guix build hello &>/dev/stdout &>${BUILD_LOG}
$ ./pre-inst-env guix lint hello

guix archive --authorize hydra.gnu.org.pub

sources
https://github.com/pjotrp/guix-notes/blob/master/INSTALL.org#building-guix-from-source
*** Stop the build a particular point

(add-after 'build 'fail #f)
*** REPL
REPL server
$ ./pre-inst-env guile --listen
M-x geiser-connect


REPL CLI
$ ./pre-inst-env guile

Packages to load
> ,use (guix)
> ,use (guix build-system)
> ,use (guix build utils)

*** Clean up temporary build directories & files

$ sudo rm -rf /tmp/guix-build-*

** Command Line Interface (CLI)
*** Download the latest Guix source code and package descriptions

$ sudo guix pull && guix pull
To update that distribution, along with the Guix tools, you must run
guix pull: the command downloads the latest Guix source code and
package descriptions, and deploys it.
*** collect all garbage

guix gc
*** version info

guix --version
*** profile space utilization

guix size <package>
*** package subcommand
**** show package search paths
syntax is:
guix package options

--search-paths[=kind]
Report environment variable definitions, in Bash syntax, that may be
needed in order to use the set of installed packages. These
environment variables are used to specify search paths for files used
by some of the installed packages.

**** profiles, manifest and install from files
syntax is:
guix package options

--profile=profile
-p profile
Use profile instead of the user’s default profile.

--manifest=file
-m file
Create a new generation of the profile from the manifest object
-returned by the Scheme code in file.

--install-from-file=file
-f file
Install the package that the code within file evaluates to.
**** search, show or list package(s)
syntax is:
guix package options

--search=regexp
-s regexp
List the available packages whose name, synopsis, or description
matches regexp. Print all the metadata of matching packages in
recutils format (see GNU recutils manual).

--show=<package>
Show details about package, taken from the list of available packages,
in recutils format (see GNU recutils manual).

-I [regexp]
--list-installed[=regexp]
List the currently installed packages in the specified profile, with
-the most re- cently installed packages shown last. When regexp is
-specified, list only installed packages whose name matches regexp.

# examples
guix package -s '^go' | recsel -p name,version,synopsis,homepage,location
guix package -s '^diff' | recsel -p name
guix package -s "" | recsel -p name -e 'license ~ "LGPL 3"'
**** install, remove, or upgrade a package
syntax is:
guix package options

Primarily, options specifies the operations to be performed during the
transaction. Upon completion, a new profile is created, but previous
generations of the profile remain available, should the user want to
roll back.  For example, to remove lua and install guile and
guile-cairo in a single transaction:

guix package -r lua -i guile guile-cairo

--install=package
-i package
Install the specified packages

--remove=package
-r package
Remove the specified packages.

--upgrade[=regexp ...]
-u [regexp ...]
Upgrade all the installed packages. If one or more regexps are
specified, upgrade only installed packages whose name matches a
regexp.

--do-not-upgrade[=regexp ...]
When used together with the --upgrade option, do not upgrade any
packages whose name matches a regexp.
**** generations and rollback
syntax is:
guix package options

--rollback
Roll back to the previous generation of the profile—i.e., undo the
last transac- tion.  When combined with options such as --install,
roll back occurs before any other actions.

--list-generations[=pattern]
-l [pattern]
Return a list of generations along with their creation dates; for each
-generation, show the installed packages, with the most recently
-installed packages shown last. Note that the zeroth generation is
-never shown.

--switch-generation=pattern
-S pattern
Switch to a particular generation defined by pattern.  pattern may be
-either a generation number or a number prefixed with “+” or “-”. The
-latter means: move forward/backward by a specified number of
-generations.

--delete-generations[=pattern]
-d [pattern]
When pattern is omitted, delete all generations except the current
-one.  This command accepts the same patterns as
---list-generations. When pat- tern is specified, delete the matching
-generations. When pattern specifies a duration, generations older
-than the specified duration match. For instance,
--delete-generations=1m deletes generations that are more than one
-month

**** Clean up

$ guix pull
$ guix package --list-generations | less

Delete genrations older than 20 days.
$ guix package --delete-generations=20d

Garbage collect up to 4GiB
$ guix gc -C 4GiB

*** system subcommand
**** update system

$ sudo guix pull
$ sudo guix system reconfigure /etc/guix-system-1466872292/config.scm
**** list system generations

$ sudo guix system list-generations | less

