* Docker Grimoire
** Installation
*** Recipe 1466361043: Install docker on debian from apt repo

#+BEGIN_EXAMPLE
$ sudo apt-get install -y apt-transport-https ca-certificates
$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 \
--recv-keys 58118E89F3A912897C070ADBF76221572C52609D

$ sudo bash -c 'cat <<EOF > /etc/apt/sources.list.d/docker.list
deb https://apt.dockerproject.org/repo debian-jessie main
EOF'

$ sudo apt-get update

Check which repo docker is coming from
$ apt-cache policy docker-engine

$ sudo apt-get install -y docker-engine docker-compose
$ sudo systemctl start docker
$ sudo systemctl enable docker
$ systemctl status docker

# Docker now sets this, but it's here as a reminder to check it.
$ sudo bash -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'

# Add users to the docker group
$ sudo usermod -a -G docker $USER
$ newgrp docker

# Test Installation
$ docker info
$ docker version
$ docker run hello-world
#+END_EXAMPLE

Source:
Installation on Debian
https://docs.docker.com/engine/installation/linux/debian/
*** Recipe 1466089143: Install docker on centos from docker rpm repo

#+BEGIN_EXAMPLE
$ sudo yum update

$ sudo tee /etc/yum.repos.d/docker.repo <<-'EOF'
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF

$ sudo yum install -y docker-engine
$ sudo systemctl start docker
$ systemctl status docker

# Docker now sets this, but it's here as a reminder to check it.
$ sudo bash -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'

# Add users to the docker group
$ sudo usermod -a -G docker $USER
$ newgrp docker

# Test Installation
$ docker info
$ docker version
$ sudo docker run hello-world
#+END_EXAMPLE

Installation on CentOS
https://docs.docker.com/engine/installation/linux/centos/
** Bind mount (Linux)

$ mkdir /home/projects/docker
$ sudo bash -c 'mv /var/lib/docker/* /home/projects/docker'
$ sudo mount --bind /home/projects/docker /var/lib/docker
$ findmnt | grep "\["
** List images

docker images | ruby -ane 'print $F[0..2].join(" "), "\n"'
** Dockerfile developement

*** Setup and using log

$ export BUILD_LOG=${HOME}/tmp/logs/docker-build.log

Inital setup
$ mkdir -p $(dirname ${BUILD_LOG})

$ ./mysql-build.bash &>/dev/stdout &>${BUILD_LOG}

*** Searching Log

$ export BUILD_LOG=${HOME}/tmp/logs/docker-build.log
$ grep 'Step' $BUILD_LOG
** Containers
*** View Container IP Address

#+BEGIN_EXAMPLE
$ docker inspect --format '{{.NetworkSettings.IPAddress}}' <container-name>|<container-id>

Example
$ docker inspect --format '{{.NetworkSettings.IPAddress}}' tools-haproxy
#+END_EXAMPLE

*** Stop and Remove all containers

#+BEGIN_EXAMPLE
$ docker stop $(docker ps -a -q) | xargs --no-run-if-empty docker rm
#+END_EXAMPLE
** Dockerfile
*** Dockerfile: APK install snippet
#+BEGIN_EXAMPLE
RUN apk update
RUN apk add \
# packages go here \
&& rm -rf /var/cache/apk/*
#+END_EXAMPLE
*** Dockerfile: APT install snippet

#+BEGIN_EXAMPLE
RUN apt-get update
RUN apt-get install \
--yes \
--no-reccommends \
# packages go here \
&& apt-get clean
#+END_EXAMPLE

*** copy a directory to docker build
copy a directory to docker build and not just it's contents.

ADD go /usr/local/go
# or
COPY go /usr/local/go
*** Set locale

#Install and setup locales
RUN apt-get install -y \
		locales \
		&& apt-get clean
RUN sed -i "s/# $LANG/$LANG/gI" /etc/locale.gen && \
		locale-gen

*** Set Data/Time & Timezone

# Set update timezone
RUN echo "{{ base.timezone }}" > /etc/timezone \
		&& dpkg-reconfigure -f noninteractive tzdata

# Vars
base:
	timezone: America/Barbados
*** Install APT https transport

RUN apt-get install -y \
		apt-transport-https \
		apt-utils \
		ca-certificates \
		lsb-release \
		&& apt-get clean

# previous method
RUN apt-get install -y \
		apt-transport-https \
		lsb-release \
		|| apt-get install --fix-broken	\
		&& apt-get clean
*** Update APT cache (jinja2 macro)
// Jinja2

{% macro apt_update() -%}
RUN rm -rf /var/lib/apt/lists/* \
		&& apt-get clean \
		&& apt-get update
{%- endmacro %}

// macro call
{{ apt_update() }}
** Problems & Solutions
*** Problem: No memory and No swap limit support

# Problem
docker info | grep WARNING

WARNING: No memory limit support
WARNING: No swap limit support

# Solution

$ sudo emacs /etc/default/grub

Then update the 'GRUB_CMDLINE_LINUX_DEFAULT' line as follows;

GRUB_CMDLINE_LINUX_DEFAULT="quiet cgroup_enable=memory swapaccount=1"

$ sudo update-grub
